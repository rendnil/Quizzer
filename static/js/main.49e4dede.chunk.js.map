{"version":3,"sources":["apis/QuestionsAdapter.js","parsers/quiz.js","components/SelectionPage/CategoryBox.js","redux/actions/fetchQuestionsAction.js","redux/actions/selectCategory.js","components/SelectionPage/CategoryGrid.js","components/SelectionPage/InfoMessage.js","components/SelectionPage/SelectionPage.js","components/QuizPage/AnswerItem.js","redux/actions/selectAnswer.js","components/QuizPage/AnswerBox.js","components/QuizPage/QuestionDetail.js","components/QuizPage/QuizPage.js","redux/actions/submitAnswer.js","components/ResultPage/IncorrectItem.js","components/ResultPage/IncorrectBox.js","components/ResultPage/ResultPage.js","components/NavBar.js","components/App.js","components/ApiData.js","redux/actions/fetchCategoriesAction.js","serviceWorker.js","redux/reducers/categoriesReducer.js","redux/reducers/selectCategoryReducer.js","redux/reducers/currentQuizReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["API_BASE_URL","process","QuestionsAdapter","fetch","concat","then","r","json","id","getRandomIndex","arr","Math","floor","random","length","Quiz","name","questions","Object","classCallCheck","this","allQuestions","counter","idArr","newQuestion","constructQuestionObj","includes","push","question","answers","answer","i","randomQuestion","sort","prompt","correctAnswer","constructAnswers","value","selectQuestions","categoryName","correctQs","incorrectQs","completed","connect","state","selectedCategory","dispatch","fetchQuestions","fetchCategoryQuestions","data","quiz","type","payload","constructQuiz","selectCategory","category","props","handleClick","react_default","a","createElement","Fragment","Segment","className","textAlign","inverted","color","onClick","categories","_ref","Grid","columns","map","Column","key","SelectionPage_CategoryBox","InfoMessage","message","Message","warning","header","loading","Dimmer","active","Loader","SelectionPage_CategoryGrid","SelectionPage_InfoMessage","NavLink","to","Button","size","basic","renderStartQuiz","selectedAnswer","currentQuiz","selectAnswer","toUpperCase","AnswerBox","QuizPage_AnswerItem","QuestionDetail","number","Header","Content","QuizPage_AnswerBox","submitAnswer","currentQuestion","questionNumber","updatedCorrectQs","toConsumableArray","updatedIncorrectQs","objectSpread","as","QuizPage_QuestionDetail","primary","Redirect","IncorrectItem","attached","info","IncorrectBox","ResultPage_IncorrectItem","ResultPage_IncorrectBox","NavBar","Menu","borderless","Item","fitted","App","BrowserRouter","basename","components_NavBar","Route","exact","path","render","components_SelectionPage_SelectionPage","QuizPage_QuizPage","components_ResultPage_ResultPage","Component","ApiData","fetchCategories","React","Boolean","window","location","hostname","match","defaultState","categoriesReducer","arguments","undefined","action","selectCategoryReducer","currentQuizReducer","combineReducers","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","es","components_ApiData","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49e4dede.chunk.js","sourcesContent":["//adapter class for interacting with API\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL\n\n\nexport default class QuestionsAdapter{\n  //method for fetching category details\n  static fetchCategories(){\n    return (\n      fetch(`${API_BASE_URL}/categories`)\n      .then(r=>r.json())\n    )\n  }\n  //method for fetching questions for a specific category \n  static fetchCategoryQuestions(id){\n    return (\n      fetch(`${API_BASE_URL}/categories/${id}`)\n      .then(r=>r.json())\n    )\n  }\n\n}\n","//data parser for creating quiz objects\n\n//determines number of questions for each quiz\nconst numQuestions = 5\n\n//helper method for return random index in an array\nconst getRandomIndex = (arr) => {\n  return Math.floor(Math.random()*arr.length)\n}\n\nexport default class Quiz{\n\n  constructor(name, questions){\n    this.name = name\n    this.allQuestions = questions\n    this.questions = []\n  }\n\n  //method for selecting all questions in a quiz\n  selectQuestions(){\n    let counter = 1\n    //use array of question ids to make sure we don't have repeats\n    const idArr = [ ]\n    while (counter<= numQuestions){\n      let newQuestion = this.constructQuestionObj(this.allQuestions[getRandomIndex(this.allQuestions)])\n\n      //if we've already added this question, keep finding new ones\n      while(idArr.includes(newQuestion.id)){\n        newQuestion = this.constructQuestionObj(this.allQuestions[getRandomIndex(this.allQuestions)])\n      }\n\n      this.questions.push(newQuestion)\n      idArr.push(newQuestion.id)\n      counter++\n    }\n  }\n\n  //method for creating the answer set for a given question\n  constructAnswers(question){\n    const answers = [ ]\n\n    answers.push(question.answer)\n\n    for (let i = 1; i<=3; i++){\n      let randomQuestion = this.allQuestions[getRandomIndex(this.allQuestions)]\n\n      //if the answers array already includes this answer, then find a new one\n      while (answers.includes(randomQuestion.answer)){\n        randomQuestion = this.allQuestions[getRandomIndex(this.allQuestions)]\n      }\n      answers.push(randomQuestion.answer)\n    }\n    //sort alphabetically to mask correct answer\n    return answers.sort()\n  }\n\n  //method for creating each question obj in a quiz\n  constructQuestionObj(question){\n    return{\n      id: question.id,\n      prompt: question.question,\n      correctAnswer: question.answer,\n      answers: this.constructAnswers(question),\n      value: question.value\n    }\n  }\n\n  //method for creating the full quiz obj\n  constructQuiz(){\n    //first select all of the questions\n    this.selectQuestions()\n    return {categoryName:this.name,\n            questions: this.questions,\n            correctQs: [],\n            incorrectQs: [],\n            completed: false\n    }\n  }\n\n} //end Quiz class\n","//individual category box\nimport React from \"react\"\nimport { connect } from 'react-redux'\nimport {fetchQuestions} from \"../../redux/actions/fetchQuestionsAction\"\nimport {selectCategory} from \"../../redux/actions/selectCategory\"\nimport {Segment} from 'semantic-ui-react'\n\n\nconst CategoryBox = (props) =>{\n\n  //on category click\n  //select Category\n  //fetch questions for this category\n  const handleClick = () => {\n    props.selectCategory(props.category)\n    props.fetchQuestions(props.category.id)\n  }\n\n  //check to see is this category is the selected category\n  // if so, change segment color to reflect selection\n  const checkSelected = ()=>{\n    if (props.selectedCategory && props.category.id===props.selectedCategory.id){\n      return(\n        <Segment className=\"category-box\" textAlign = \"center\" inverted color=\"orange\" onClick={handleClick}>\n          <h3>{props.category.name}</h3>\n        </Segment>\n      )\n    }else{\n      return(\n        <Segment className=\"category-box\" textAlign = \"center\" onClick={handleClick}>\n          <h3>{props.category.name}</h3>\n        </Segment>\n      )\n    }\n  }\n\n  return(\n    <React.Fragment>\n      {checkSelected()}\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = (state) =>{\n  return{selectedCategory: state.selectedCategory}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    fetchQuestions: (id) => dispatch(fetchQuestions(id)),\n    selectCategory: (category) => dispatch(selectCategory(category))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryBox)\n","//action creator for fetching creating a quiz\nimport QuestionsAdapter from \"../../apis/QuestionsAdapter\"\nimport Quiz from \"../../parsers/quiz\"\n\nexport const fetchQuestions = (id) => {\n\n  return (dispatch) => {\n    \n    QuestionsAdapter.fetchCategoryQuestions(id)\n    .then((data) => {\n      //create a new quiz instance\n      let quiz = new Quiz(data.name, data.questions)\n      //dispatch the new quiz\n      dispatch({type:\"CREATE_QUIZ\", payload: quiz.constructQuiz()})\n    })\n  }\n}\n","//action  creator for selecting category on home page\nexport const selectCategory = (category) => {\n    return {type:\"SELECT_CATEGORY\", payload: category}\n}\n","//wrapper for grid of categories\nimport React from \"react\"\nimport { connect } from 'react-redux'\nimport {Grid} from 'semantic-ui-react'\nimport CategoryBox from \"./CategoryBox\"\n\n\nconst CategoryGrid = ({categories}) => {\n  return(\n    <div className=\"category-grid-wrapper\">\n      {/*grid w/ 4 columns */}\n      <Grid columns={4}>\n        {/*iterate over category objs */}\n        {categories.map((category)=>{\n          return(\n            <Grid.Column key={category.id}>\n              <CategoryBox category={category}/>\n            </Grid.Column>\n         )\n        })}\n      </Grid>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {categories: state.categories.categories}\n}\n\nexport default connect(mapStateToProps)(CategoryGrid)\n","//home page info message\nimport React from \"react\"\nimport {Message} from 'semantic-ui-react'\n\nconst InfoMessage = ({message}) => {\n  return(\n    <Message id=\"start-message\" warning header={message}/>\n  )\n}\n\nexport default InfoMessage\n","//category selection page\nimport React from \"react\"\nimport { connect } from 'react-redux'\nimport {Button, Segment, Dimmer, Loader, Image} from 'semantic-ui-react'\nimport {NavLink } from 'react-router-dom';\nimport \"../../css/SelectionPage.css\"\nimport CategoryGrid from \"./CategoryGrid\"\nimport InfoMessage from \"./InfoMessage\"\n\n\nconst SelectionPage = (props) => {\n\n  //method for rendering the start quiz btn\n  //check to see if a category has been selected first\n  const renderStartQuiz = ()=>{\n      if(props.selectedCategory){\n        return(\n          <div id=\"start-button\">\n            <NavLink to = \"/quiz\">\n              <Button size=\"massive\" color=\"green\" basic>\n                Start {props.selectedCategory.name} Quiz\n              </Button>\n            </NavLink>\n            </div>\n        )\n      }\n    }\n\n  if (props.loading){\n    return (\n      <Dimmer active inverted>\n        <Loader inverted>Loading</Loader>\n      </Dimmer>\n    )\n  }else{\n    return(\n      <div className=\"selection-page-wrapper\">\n        <CategoryGrid />\n        {!props.selectedCategory? <InfoMessage message=\"Select a category to start!\" />: null}\n        {renderStartQuiz()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) =>{\n  return{\n    selectedCategory: state.selectedCategory,\n    loading: state.categories.loading\n  }\n}\n\nexport default connect(mapStateToProps)(SelectionPage)\n","//individual answer items\nimport React from \"react\"\nimport { connect } from 'react-redux'\nimport {selectAnswer} from \"../../redux/actions/selectAnswer\"\nimport {Segment} from 'semantic-ui-react'\n\n\nconst AnswerItem = (props)=>{\n  //method for selecting an answer\n  const handleClick = () => {\n    props.selectAnswer(props.answer)\n  }\n\n  //check to see if answer is the selected answer\n  //change segment color if selected\n  const checkSelected = () =>{\n    if (props.answer===props.selectedAnswer){\n      return(\n        <Segment inverted color=\"blue\" onClick={handleClick}>\n          <h3>{props.answer.toUpperCase()}</h3>\n        </Segment>\n      )\n    }else{\n      return(\n        <Segment onClick={handleClick}>\n          <h3>{props.answer.toUpperCase()}</h3>\n        </Segment>\n      )\n    }\n  }\n\n  return(\n    checkSelected()\n  )\n\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return{selectAnswer: (answer)=>dispatch(selectAnswer(answer))}\n}\n\nconst mapStateToProps = (state) => {\n  return{selectedAnswer: state.currentQuiz.selectedAnswer}\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerItem)\n","//action creator for selecting answers in questions\nexport const selectAnswer = (answer) => {\n    return {type:\"SELECT_ANSWER\", payload: answer}\n}\n","//wrapper for individual answer items\nimport React from \"react\"\nimport AnswerItem from \"./AnswerItem\"\n\nconst AnswerBox = ({answers}) => {\n  return(\n    <div id=\"answers-wrapper\">\n    {/* iterate over answer objs*/}\n      {answers.map((answer)=>{\n        return <AnswerItem key={answer} answer={answer} />\n      })}\n    </div>\n  )\n}\n\nexport default AnswerBox\n","//individual question details\nimport React from \"react\"\nimport {Message} from 'semantic-ui-react'\nimport AnswerBox from \"./AnswerBox\"\n\n\nconst QuestionDetail = ({number, question}) =>{\n\n  return(\n    <div>\n      <Message id=\"question-prompt\" warning>\n        <Message.Header>Question #{number}</Message.Header>\n        <Message.Content>{question.prompt}</Message.Content>\n      </Message>\n      <AnswerBox answers={question.answers}/>\n    </div>\n  )\n}\n\nexport default QuestionDetail\n","//component for quiz page\nimport React from \"react\"\nimport { connect } from 'react-redux'\nimport {Button, Header} from 'semantic-ui-react'\nimport {Redirect} from \"react-router\"\nimport \"../../css/QuizPage.css\"\nimport QuestionDetail from \"./QuestionDetail\"\nimport {submitAnswer} from \"../../redux/actions/submitAnswer\"\n\n\nconst QuizBox = (props) =>{\n\n  //method for handling answer submitting\n  const submitAnswer = () => {\n    props.submitAnswer(props.currentQuiz)\n  }\n\n  //check if an answer has been selected\n  //if so, render the submit button\n  const btnRender = () => {\n    if (props.selectedAnswer){\n      return(\n        <div id=\"submit-answer-btn\" >\n          <Button  onClick={submitAnswer} basic size=\"large\" primary>Submit</Button>\n        </div>\n      )\n    }else{\n      return null\n    }\n  }\n\n  //check to see if there is a current quiz in progress\n  //additionally, check to see that the quiz has not been completed\n  if(props.currentQuiz && !props.currentQuiz.completed){\n    return(\n      <div className=\"quiz-page-wrapper\">\n        {/*show the current question */}\n        <Header as=\"h4\" id=\"question-number\">{props.currentQuiz.questionNumber} of {props.currentQuiz.questions.length}</Header>\n        {/*show category title */}\n        <Header id=\"quiz-title\" as=\"h1\" textAlign='center'>{props.currentQuiz.categoryName} Quiz</Header>\n        {/* render question details*/}\n        <QuestionDetail\n        number={props.currentQuiz.questionNumber}\n        question={props.currentQuiz.questions[props.currentQuiz.questionNumber-1]}\n        />\n\n        {btnRender()}\n      </div>\n    )\n  }else{\n    return(<Redirect to =\"/results\" />)\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return{\n    currentQuiz: state.currentQuiz,\n    selectedAnswer: state.currentQuiz.selectedAnswer\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return{submitAnswer: (quiz)=>dispatch(submitAnswer(quiz))}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizBox)\n","//action creator to handle submitting an answers and updating the quiz obj\nexport const submitAnswer = (quiz) => {\n\n    const currentQuestion = quiz.questions[quiz.questionNumber-1]\n    const updatedCorrectQs = [...quiz.correctQs]\n    const updatedIncorrectQs = [...quiz.incorrectQs]\n    //check to see if the submitted answer is correct\n    // if it is correct, then add it to the appropriate array\n    if(currentQuestion.correctAnswer===quiz.selectedAnswer){\n      updatedCorrectQs.push(currentQuestion)\n    }else{\n      updatedIncorrectQs.push(currentQuestion)\n    }\n\n    return (dispatch) => {\n      //update quiz object with correct/incorrect questions, question number\n    ///check if quiz is completed\n      if (quiz.questionNumber === quiz.questions.length){\n        dispatch({\n          type:\"SUBMIT_ANSWER\",\n          payload: {...quiz,\n                    correctQs:updatedCorrectQs,\n                    incorrectQs:updatedIncorrectQs,\n                    questionNumber:quiz.questionNumber+1,\n                    completed:true\n                    }\n        })\n        //reset selected category\n        dispatch({type:\"RESET_CATEGORY\"})\n      }else{\n\n        dispatch({\n          type:\"SUBMIT_ANSWER\",\n          payload: {...quiz,\n                    correctQs:updatedCorrectQs,\n                    incorrectQs:updatedIncorrectQs,\n                    questionNumber:quiz.questionNumber+1\n                    }\n        })\n        //clear selected answer\n        dispatch({type:\"CLEAR_SELECTED_ANSWER\"})\n      }\n    }\n}\n","//individual incorrect question\nimport React from \"react\"\nimport {Message} from 'semantic-ui-react'\n\nconst IncorrectItem = ({question}) => {\n  return(\n    <div className=\"incorrect-item\">\n      {/*render question prompt */}\n      <Message attached color=\"red\">\n        <Message.Header>Question: {question.prompt}</Message.Header>\n      </Message>\n\n      {/* render the correct answer*/}\n      <Message attached=\"bottom\" info>\n        <Message.Header>Correct Answer: {question.correctAnswer.toUpperCase()}</Message.Header>\n      </Message>\n    </div>\n  )\n}\n\nexport default IncorrectItem\n","//wrapper for incorrect questions\nimport React from \"react\"\nimport {Header} from 'semantic-ui-react'\nimport IncorrectItem from \"./IncorrectItem\"\n\nconst IncorrectBox = ({currentQuiz}) => {\n\n  return(\n    <div id=\"incorrect-box-wrapper\">\n\n      <Header as=\"h2\" textAlign=\"center\">Incorrect Answers</Header>\n      {/* iterate over incorrect question objs */}\n      {currentQuiz.incorrectQs.map((question)=>{\n        return <IncorrectItem key={question.id} question={question} />\n      })}\n    </div>\n  )\n}\n\nexport default IncorrectBox\n","//Quiz resut page\nimport React from \"react\"\nimport { connect } from 'react-redux'\nimport {Button, Message} from 'semantic-ui-react'\nimport {NavLink } from 'react-router-dom';\nimport {Redirect} from \"react-router\"\nimport IncorrectBox from \"./IncorrectBox\"\nimport \"../../css/ResultPage.css\"\n\nconst ResultPage = ({currentQuiz}) => {\n\n  //method for rendering incorrectly answered questions\n  //with their correct answers\n  const incorrectAnswerRender = () => {\n    //check to see if there are any incorrectly answered questions\n    if (currentQuiz.incorrectQs.length){\n      return(\n        <IncorrectBox currentQuiz={currentQuiz} />\n      )\n    }else{\n      return null\n    }\n  }\n\n  if (currentQuiz){\n    return(\n      <div id=\"result-page-wrapper\">\n        <Message info id=\"result-message\">\n          <Message.Header>YOU ANSWERED</Message.Header>\n\n          {/* show the correctly answered metric*/}\n          <Message.Content>{currentQuiz.correctQs.length} out of {currentQuiz.questions.length} Correctly</Message.Content>\n        </Message>\n\n        {/*button to navigate back to category screen */}\n        <div id=\"back-home-btn\">\n          <NavLink to = \"/\">\n            <Button color=\"yellow\" size=\"large\">Back to Home</Button>\n          </NavLink>\n        </div>\n\n        {incorrectAnswerRender()}\n      </div>\n    )\n  }else{\n    return(<Redirect to =\"/\" />)\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {currentQuiz: state.currentQuiz}\n}\n\nexport default connect(mapStateToProps)(ResultPage)\n","import React from \"react\"\nimport {NavLink } from 'react-router-dom';\nimport {Menu} from \"semantic-ui-react\"\n\n\nconst NavBar = (props) => {\n  //generate different navbar options and links\n  return(\n    <Menu inverted borderless color=\"green\">\n\n      {/* display the site name*/}\n      <Menu.Item fitted=\"vertically\" id=\"navbar-header\">\n        <NavLink to = \"/\">Quizzer</NavLink>\n      </Menu.Item>\n    </Menu>\n  )\n}\n\nexport default NavBar\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport SelectionPage from \"./SelectionPage/SelectionPage\"\nimport QuizPage from \"./QuizPage/QuizPage\"\nimport ResultPage from \"./ResultPage/ResultPage\"\nimport NavBar from \"./NavBar\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Router basename={process.env.REACT_APP_BASE_URL}>\n          <React.Fragment>\n            <NavBar />\n            <Route exact path = \"/\" render = {()=> <SelectionPage/>}/>\n            <Route exact path = \"/quiz\" render = {()=> <QuizPage/>}/>\n            <Route exact path = \"/results\" render = {()=> <ResultPage/>}/>\n          </React.Fragment>\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","//component for fetching data from API\nimport React from \"react\"\nimport { connect } from 'react-redux'\nimport {fetchCategories} from \"../redux/actions/fetchCategoriesAction\"\n\n\nclass ApiData extends React.Component{\n\n  //fetch all of the category details upon page mounting\n  componentDidMount(){\n    this.props.fetchCategories()\n  }\n\n  render(){\n    return(<React.Fragment/>)\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {fetchCategories: ()=>dispatch(fetchCategories())}\n}\n\nexport default connect(null, mapDispatchToProps)(ApiData)\n","//action creator for fetching category names\nimport QuestionsAdapter from \"../../apis/QuestionsAdapter\"\n\nexport const fetchCategories = () => {\n\n  return (dispatch) => {\n    dispatch({type:\"LOADING\"})\n    QuestionsAdapter.fetchCategories()\n    .then((data) => {\n      dispatch({type:\"FETCH_CATEGORIES\", payload: data})\n    })\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//reducer for question categories\nconst defaultState = {\n  loading: false,\n  categories: []\n}\n\nconst categoriesReducer = (state=defaultState, action) => {\n  switch(action.type){\n    case \"FETCH_CATEGORIES\":\n      return {loading:false, categories:action.payload}\n    case \"LOADING\":\n      return {...state, loading:true}\n    default:\n      return state\n  }\n}\n\nexport default categoriesReducer\n","//reducer to handle selecting categories\nconst defaultState = null\n\nconst selectCategoryReducer = (state=defaultState, action) => {\n  switch(action.type){\n    case \"SELECT_CATEGORY\":\n      return action.payload\n    case \"RESET_CATEGORY\":\n      return null  \n    default:\n      return state\n  }\n}\n\nexport default selectCategoryReducer\n","//reducer for handling the current quiz\nconst defaultState = null\nconst defaultQuestionNumber = 1\n\nconst currentQuizReducer = (state=defaultState, action) => {\n  switch(action.type){\n    //create a new quiz with initialized question number\n    case \"CREATE_QUIZ\":\n      return {...action.payload, questionNumber:defaultQuestionNumber}\n    //handle selecting and unselecting answers\n    case \"SELECT_ANSWER\":\n        if (state.selectedAnswer===action.payload){\n          return {...state, selectedAnswer:null}\n        }else{\n          return {...state, selectedAnswer: action.payload}\n        }\n    //clear selected answer\n    case \"CLEAR_SELECTED_ANSWER\":\n      return {...state, selectedAnswer:null}\n    //submit answer \n    case \"SUBMIT_ANSWER\":\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport default currentQuizReducer\n","import { combineReducers } from 'redux';\nimport categoriesReducer from \"./categoriesReducer\"\nimport selectCategoryReducer from \"./selectCategoryReducer\"\nimport currentQuizReducer from \"./currentQuizReducer\"\n\n\nexport default combineReducers({\n  categories: categoriesReducer,\n  selectedCategory: selectCategoryReducer,\n  currentQuiz: currentQuizReducer\n})\n","import { createStore, applyMiddleware } from 'redux';\nimport reducer from './reducers';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport ApiData from './components/ApiData';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store\"\n\nReactDOM.render(\n  <Provider store = {store}>\n    <React.Fragment>\n      <ApiData/>\n      <App />\n    </React.Fragment>\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}